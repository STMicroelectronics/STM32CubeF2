/**
  @page TIM_6Steps TIM 6 Steps example

  @verbatim
  ******************** (C) COPYRIGHT 2017 STMicroelectronics *******************
  * @file    TIM/TIM_6Steps/Readme.txt 
  * @author  MCD Application Team
  * @brief   Description of the TIM 6 Steps example.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2017 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example shows how to configure the TIM1 peripheral to generate 6 Steps.
The STM32F2xx TIM1 peripheral offers the possibility to program in advance the 
configuration for the next TIM1 outputs behaviour (step) and change the configuration
of all the channels at the same time. This operation is possible when the COM 
(commutation) event is used.

The COM event can be generated by software by setting the COM bit in the TIM1_EGR
register or by hardware (on TRC rising edge).
In this example, a software COM event is generated each 1 ms: using the SysTick 
interrupt.

The TIM1 is configured in Timing Mode, each time a COM event occurs, a new TIM1
configuration will be set in advance. Only changed states are programmed. 

The break Polarity is used at High level.

The following Table describes the TIM1 Channels states:

@verbatim
                     -----------------------------------------------
                    | Step1 | Step2 | Step3 | Step4 | Step5 | Step6 |
          ----------------------------------------------------------
         |Channel1  | 1(PWM)|   0   |   0   |   0   |   0   |1(PWM) |
          ----------------------------------------------------------
         |Channel1N |   0   |   0   |1(PWM) |1(PWM) |   0   |   0   |
          ----------------------------------------------------------
         |Channel2  |   0   |   0   |   0   |1(PWM) |1(PWM) |   0   |
          ----------------------------------------------------------
         |Channel2N |1(PWM) |1(PWM) |   0   |   0   |   0   |   0   |
          ----------------------------------------------------------
         |Channel3  |   0   |1(PWM) |1(PWM) |   0   |   0   |   0   |
          ----------------------------------------------------------
         |Channel3N |   0   |   0   |   0   |   0   |1(PWM) |1(PWM) |
          -----------------------------------------------------------
   
   
 Channel1  (PA.08)   |||||||_________________________________||||||||||||||_________________________________|||||||
 Channel1N (PB.13)   _______________||||||||||||||||_______________________________||||||||||||||||________________
                                                    
 Channel2  (PE.11)   _______________________||||||||||||||||_______________________________||||||||||||||||________
 Channel2N (PB.14)   |||||||||||||||________________________________|||||||||||||||________________________________
                                                    
 Channel3  (PE.13)   _______||||||||||||||||_______________________________||||||||||||||||________________________
 Channel3N (PB.15)   ________________________________|||||||||||||||________________________________|||||||||||||||
   
@endverbatim


@note Care must be taken when using HAL_Delay(), this function provides accurate delay (in milliseconds)
      based on variable incremented in SysTick ISR. This implies that if HAL_Delay() is called from
      a peripheral ISR process, then the SysTick interrupt must have higher priority (numerically lower)
      than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
      To change the SysTick interrupt priority you have to use HAL_NVIC_SetPriority() function.
      
@note The application needs to ensure that the SysTick time base is always set to 1 millisecond
      to have correct HAL operation.


@par Directory contents 

  - TIM/TIM_6Steps/Inc/stm32f2xx_hal_conf.h     HAL configuration file
  - TIM/TIM_6Steps/Inc/stm32f2xx_it.h           Interrupt handlers header file
  - TIM/TIM_6Steps/Inc/main.h                   Main program header file  
  - TIM/TIM_6Steps/Src/stm32f2xx_it.c           Interrupt handlers
  - TIM/TIM_6Steps/Src/main.c                   Main program
  - TIM/TIM_6Steps/Src/stm32f2xx_hal_msp.c      HAL MSP module
  - TIM/TIM_6Steps/Src/system_stm32f2xx.c       STM32F2xx system clock configuration file

      
@par Hardware and Software environment 

  - This example runs on STM32F207xx/217xx device.
    
  - This example has been tested with STMicroelectronics STM322xG-EVAL 
    evaluation boards and can be easily tailored to any other supported device and development board

  - STM322xG-EVAL Set-up
    - Connect the TIM1 pins to an oscilloscope to monitor the different waveforms:
      - TIM1_CH1   pin (PA.08: Pin16 in CN3) 
      - TIM1_CH1N  pin (PB.13: Pin41 in CN3)
      - TIM1_CH2   pin (PE.11: Pin26 in CN2)
      - TIM1_CH2N  pin (PB.14: Pin40 in CN3)
      - TIM1_CH3   pin (PE.13: Pin28 in CN2)
      - TIM1_CH3N  pin (PB.15: Pin38 in CN3)
      
    - Connect TIM1 break pin TIM1_BKIN pin (PB.12: Pin 42 in CN3) to the GND. To break outputs,
      switch the level from 0V to 3.3V.


@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example


 */
